// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: sblast.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SemanticBlastServiceClient is the client API for SemanticBlastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SemanticBlastServiceClient interface {
	Blast(ctx context.Context, in *BlastRequest, opts ...grpc.CallOption) (*BlastResponse, error)
}

type semanticBlastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSemanticBlastServiceClient(cc grpc.ClientConnInterface) SemanticBlastServiceClient {
	return &semanticBlastServiceClient{cc}
}

func (c *semanticBlastServiceClient) Blast(ctx context.Context, in *BlastRequest, opts ...grpc.CallOption) (*BlastResponse, error) {
	out := new(BlastResponse)
	err := c.cc.Invoke(ctx, "/server.SemanticBlastService/Blast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SemanticBlastServiceServer is the server API for SemanticBlastService service.
// All implementations must embed UnimplementedSemanticBlastServiceServer
// for forward compatibility
type SemanticBlastServiceServer interface {
	Blast(context.Context, *BlastRequest) (*BlastResponse, error)
	mustEmbedUnimplementedSemanticBlastServiceServer()
}

// UnimplementedSemanticBlastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSemanticBlastServiceServer struct {
}

func (UnimplementedSemanticBlastServiceServer) Blast(context.Context, *BlastRequest) (*BlastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blast not implemented")
}
func (UnimplementedSemanticBlastServiceServer) mustEmbedUnimplementedSemanticBlastServiceServer() {}

// UnsafeSemanticBlastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SemanticBlastServiceServer will
// result in compilation errors.
type UnsafeSemanticBlastServiceServer interface {
	mustEmbedUnimplementedSemanticBlastServiceServer()
}

func RegisterSemanticBlastServiceServer(s grpc.ServiceRegistrar, srv SemanticBlastServiceServer) {
	s.RegisterService(&SemanticBlastService_ServiceDesc, srv)
}

func _SemanticBlastService_Blast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SemanticBlastServiceServer).Blast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.SemanticBlastService/Blast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SemanticBlastServiceServer).Blast(ctx, req.(*BlastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SemanticBlastService_ServiceDesc is the grpc.ServiceDesc for SemanticBlastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SemanticBlastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.SemanticBlastService",
	HandlerType: (*SemanticBlastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Blast",
			Handler:    _SemanticBlastService_Blast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sblast.proto",
}
